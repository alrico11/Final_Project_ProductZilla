
//         expect(res.statusCode).toBe(201);
//         // expect(res.body).toHaveProperty('id', 1);
            // expect(res.body).toBe('fullname', 'John Doe');
//     });

//     it('should return 400 if request body is invalid', async () => {
//         // Request endpoint dengan supertest
//         const res = await request(app)
//             .post('/api/users')
//             .send({
//                 fullname: 123,
//             });
//         // Assertion
//         console.log(res.statusCode)
//         //expect(res.body).toHaveProperty('error_message');
     });
});

// describe('PUT /api/users/:id', () => {
//     it('should update a user by id', async () => {
//         // Mock response dari model User.findById
//         User.findById.mockResolvedValue({ id: 1, fullname: 'John Doe' });

//         // Request endpoint dengan supertest
//         const res = await request(app)
//             .put('/api/users/1')
//             .send({
//                 fullname: 'Jane Doe',
//                 email: 'janedoe@example.com',
//                 password: 'newpassword',
//                 telephone: '08123456789',
//                 birth_date: '1990-01-01',
//                 gender: false
//             });

//         // Assertion
//         expect(res.statusCode).toEqual(200);
//         expect(res.body).toHaveProperty('id', 1);
//         expect(res.body).toHaveProperty('fullname', 'Jane Doe');
//         expect(res.body).toHaveProperty('email', 'janedoe@example.com');
//         expect(res.body).toHaveProperty('gender', 'Female');
//     });

//     it('should return 404 if user not found', async () => {
//         // Mock response dari model User.findById
//         User.findById.mockResolvedValue(null);
//         // Request endpoint dengan supertest
//         const res = await request(app)
//             .put('/api/users/1')
//             .send({
//                 fullname: 'Jane Doe',
//                 email: 'janedoe@example.com',
//                 password: 'newpassword',
//                 telephone: '08123456789',
//                 birth_date: '1990-01-01',
//                 gender: 'Female'
//             });

//         // Assertion
//         expect(res.statusCode).toEqual(404);
//         expect(res.body).toHaveProperty('message', 'User not found');
//     });
// });

// describe('DELETE /api/users/:id', () => {
//     it('should delete a user by id', async () => {
//         // Mock response dari model User.findById
//         User.findById.mockResolvedValue({ id: 1, fullname: 'John Doe' });

//         // Request endpoint dengan supertest
//         const res = await request(app).delete('/api/users/1');

//         // Assertion
//         expect(res.statusCode).toEqual(200);
//         expect(res.body).toHaveProperty('message', 'User deleted successfully');
//     });

//     it('should return 404 if user not found', async () => {
//         // Mock response dari model User.findById
//         User.findById.mockResolvedValue(null);

//         // Request endpoint dengan supertest
//         const res = await request(app).delete('/api/users/1');

//         // Assertion
//         expect(res.statusCode).toEqual(404);
//         expect(res.body).toHaveProperty('message', 'User not found');
//     });
// });

// describe('GET /api/users', () => {
//     it('should return all users', async () => {
//         // Mock response dari model User.find
//         User.find.mockResolvedValue([{ id: 1, fullname: 'John Doe' }]);

//         // Request endpoint dengan supertest
//         const res = await request(app).get('/api/users');

//         // Assertion
//         expect(res.statusCode).toEqual(200);
//         expect(res.body).toHaveLength(1);
//         expect(res.body[0]).toHaveProperty('id', 1);
//         expect(res.body[0]).toHaveProperty('fullname', 'John Doe');
//     });
// });